/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => StudentRepoPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  stuSettings: {
    grade: "\u5C0F\u5B66\u56DB\u5E74\u7EA7",
    localLanguage: "zh-Hans"
  },
  speechSettings: {
    subscriptionKey: "",
    speechLanguage: "en",
    speechVoice: "en-GB-SoniaNeural",
    speechOutputPath: "_audios"
  },
  ocrSettings: {
    appID: "",
    apiKey: "",
    apiSecret: "",
    accessToken: {
      token: "",
      exp: 0
    }
  },
  llmSettings: {
    apiBase: "",
    apiKey: "",
    modelName: ""
  },
  mtSettings: {
    subscriptionKey: ""
  }
};
var StudentRepoSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: this.plugin.trans.pluginName });
    new import_obsidian.Setting(containerEl).setName(this.plugin.trans.studentGrade).setDesc(this.plugin.trans.studentGrade).addText((text) => text.setPlaceholder("\u5C0F\u5B66\u56DB\u5E74\u7EA7").setValue(this.plugin.settings.stuSettings.grade).onChange(async (value) => {
      this.plugin.settings.stuSettings.grade = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(this.plugin.trans.localLanguage).setDesc(this.plugin.trans.localLanguage).addDropdown((dropdown) => {
      dropdown.addOption("en", "English");
      dropdown.addOption("zh-Hans", "\u666E\u901A\u8BDD");
      dropdown.setValue(this.plugin.settings.stuSettings.localLanguage);
      dropdown.onChange((option) => {
        this.plugin.settings.stuSettings.localLanguage = option;
        this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: this.plugin.trans.llmSetting });
    new import_obsidian.Setting(containerEl).setName("API URL").setDesc(`${this.plugin.trans.llmProvider} LLM API URL`).addText((text) => text.setPlaceholder("https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions").setValue(this.plugin.settings.llmSettings.apiBase).onChange(async (value) => {
      this.plugin.settings.llmSettings.apiBase = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc(`${this.plugin.trans.llmProvider} LLM API Key`).addText((text) => text.setPlaceholder("sk-***").setValue(this.plugin.settings.llmSettings.apiKey).onChange(async (value) => {
      this.plugin.settings.llmSettings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Model Name").setDesc(`${this.plugin.trans.llmProvider} LLM Model Name`).addText((text) => text.setPlaceholder("qwen-turbo").setValue(this.plugin.settings.llmSettings.modelName).onChange(async (value) => {
      this.plugin.settings.llmSettings.modelName = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: this.plugin.trans.ocrSetting });
    new import_obsidian.Setting(containerEl).setName("APP ID").setDesc(`${this.plugin.trans.ocrProvider} APP ID`).addText((text) => text.setPlaceholder("\u4F60\u7533\u8BF7\u5230\u7684APP ID").setValue(this.plugin.settings.ocrSettings.appID).onChange(async (value) => {
      this.plugin.settings.ocrSettings.appID = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc(`${this.plugin.trans.ocrProvider} API Key`).addText((text) => text.setPlaceholder("\u4F60\u7533\u8BF7\u5230\u7684API Key").setValue(this.plugin.settings.ocrSettings.apiKey).onChange(async (value) => {
      this.plugin.settings.ocrSettings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API Secret").setDesc(`${this.plugin.trans.ocrProvider} API Secret`).addText((text) => text.setPlaceholder("\u4F60\u7533\u8BF7\u5230\u7684API Secret").setValue(this.plugin.settings.ocrSettings.apiSecret).onChange(async (value) => {
      this.plugin.settings.ocrSettings.apiSecret = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: this.plugin.trans.speechSetting });
    new import_obsidian.Setting(containerEl).setName(this.plugin.trans.speechSubscriptionKey).setDesc("Microsoft Azure Speech Subscription Key").addText((text) => text.setPlaceholder("Your Azure Speech Subscription Key").setValue(this.plugin.settings.speechSettings.subscriptionKey).onChange(async (value) => {
      this.plugin.settings.speechSettings.subscriptionKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(this.plugin.trans.speechVoiceType).setDesc("Speech Voice Type").addDropdown((dropdown) => {
      dropdown.addOption("en-GB-SoniaNeural", this.plugin.trans.speechVoiceGB);
      dropdown.addOption("en-US-AmandaMultilingualNeural", this.plugin.trans.speechVoiceUS);
      dropdown.addOption("zh-CN-XiaoxiaoNeural", this.plugin.trans.speechVoiceCN);
      dropdown.setValue(this.plugin.settings.speechSettings.speechVoice);
      dropdown.onChange((option) => {
        this.plugin.settings.speechSettings.speechVoice = option;
        this.plugin.saveSettings();
      });
    });
  }
};

// src/ms_azure.ts
var import_obsidian2 = require("obsidian");
var serviceRegion = "eastasia";
var speechApiUrl = `https://${serviceRegion}.tts.speech.microsoft.com/cognitiveservices/v1`;
var visionApiUrl = `https://${serviceRegion}.api.cognitive.microsoft.com/vision/v3.2/ocr`;
async function textToSpeechHttp(text, subscriptionKey, speechVoice) {
  const headers = {
    "Ocp-Apim-Subscription-Key": subscriptionKey,
    "Content-Type": "application/ssml+xml",
    "X-Microsoft-OutputFormat": "audio-16khz-32kbitrate-mono-mp3",
    "User-Agent": "MySDK/1.0"
  };
  const body = `
  <speak version='1.0' xml:lang='en-US'>
      <voice xml:lang='en-US' xml:gender='Female' name='${speechVoice}'>
          ${text}
      </voice>
  </speak>
  `;
  const requestParam = {
    url: speechApiUrl,
    method: "POST",
    headers,
    body
  };
  const response = await (0, import_obsidian2.requestUrl)(requestParam);
  if (response.status != 200) {
    console.error("Text to speech error", response);
    return new ArrayBuffer(0);
  }
  return response.arrayBuffer;
}

// src/baidu_ai.ts
var import_obsidian3 = require("obsidian");
async function createToken(apiKey, apiSecret) {
  if (!apiKey || !apiSecret)
    throw new Error("Invalid API key secret");
  const url = `https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&client_id=${apiKey}&client_secret=${apiSecret}`;
  const headers = {
    "Content-Type": "application/json",
    "Accept": "application/json"
  };
  const response = await (0, import_obsidian3.requestUrl)({
    url,
    method: "POST",
    headers
  });
  if (response.status != 200) {
    console.error("create token error", response);
    return {};
  }
  const data = response.json;
  const token = data.access_token;
  const now = Date.now();
  const exp = now + data.expires_in;
  return {
    token,
    exp
  };
}
async function checkAccessToken(ocrSettings) {
  const now = Date.now();
  if (ocrSettings.accessToken && ocrSettings.accessToken.token && ocrSettings.accessToken.exp > now + 3 * 60 * 1e3) {
    return false;
  }
  const newToken = await createToken(ocrSettings.apiKey, ocrSettings.apiSecret);
  console.log("create new token", newToken);
  ocrSettings.accessToken = newToken;
  return true;
}
async function imageToTextHttp(imageBuffer, ocrSettings) {
  const url = `https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token=${ocrSettings.accessToken.token}`;
  const headers = {
    "Content-Type": "application/x-www-form-urlencoded"
  };
  const image_base64 = (0, import_obsidian3.arrayBufferToBase64)(imageBuffer);
  const body = `image=${encodeURIComponent(image_base64)}&paragraph=true`;
  const requestParam = {
    url,
    method: "POST",
    headers,
    body
  };
  const response = await (0, import_obsidian3.requestUrl)(requestParam);
  if (response.status != 200) {
    console.error("Image to text error", response);
    new import_obsidian3.Notice(`Image to text error: ${response.status}`);
    return "";
  }
  const result = response.json;
  let text = "";
  if (result.paragraphs_result) {
    result.paragraphs_result.forEach((item) => {
      for (let i = 0; i < item.words_result_idx.length; i++) {
        text += result.words_result[item.words_result_idx[i]].words + " ";
      }
      text += "\n";
    });
  }
  return text;
}
async function translateTextHttp(text, to_lang, ocrSettings) {
  const url = `https://aip.baidubce.com/rpc/2.0/mt/texttrans/v1?access_token=${ocrSettings.accessToken.token}`;
  const headers = {
    "Content-Type": "application/json;charset=utf-8"
  };
  const body = {
    "q": text,
    "from": "auto",
    "to": to_lang
  };
  const requestParam = {
    url,
    method: "POST",
    headers,
    body: JSON.stringify(body)
  };
  const response = await (0, import_obsidian3.requestUrl)(requestParam);
  if (response.status != 200) {
    console.error("Translate text error", response);
    new import_obsidian3.Notice(`Translate text error: ${response.status}`);
    return "";
  }
  const result = response.json;
  let result_text = "";
  result.result.trans_result.forEach((item) => {
    console.log("\u539F\u6587\uFF1A", item.src);
    console.log("\u8BD1\u6587\uFF1A", item.dst);
    result_text += item.dst;
  });
  return result_text;
}

// src/prompt.ts
var GENERATE_SIMILAR_TOPIC_TEMPLATE = `
\u4F60\u7684\u4EFB\u52A1\u662F\u6839\u636E\u5DF2\u6709\u7684\u9898\u76EE\u751F\u62105\u9053\u6269\u5C55\u9898\u76EE\uFF0C\u8FD9\u4E9B\u9898\u76EE\u8981\u7B26\u5408{GRADE}\u7684\u77E5\u8BC6\u6C34\u5E73\u3002

\u9996\u5148\uFF0C\u5DF2\u6709\u9898\u76EE\u5982\u4E0B\uFF1A
{TOPIC}

{GRADE}\u77E5\u8BC6\u6C34\u5E73\u7684\u51FA\u9898\u8981\u6C42\u5982\u4E0B\uFF1A
1. \u9898\u76EE\u4E0D\u80FD\u8FC7\u4E8E\u590D\u6742\uFF0C\u8981\u7B26\u5408{GRADE}\u5B66\u751F\u7684\u8BA4\u77E5\u80FD\u529B\u3002
2. \u5E94\u6DB5\u76D6{GRADE}\u8BFE\u7A0B\u4E2D\u7684\u5E38\u89C1\u77E5\u8BC6\u70B9\u3002

\u5728\u51FA\u9898\u65F6\uFF0C\u8BF7\u9075\u5FAA\u4EE5\u4E0B\u6307\u5BFC\uFF1A
1. \u5BF9\u4E8E\u6BCF\u4E00\u9053\u6269\u5C55\u9898\u76EE\uFF0C\u5C3D\u91CF\u4ECE\u4E0D\u540C\u7684\u77E5\u8BC6\u70B9\u89D2\u5EA6\u51FA\u53D1\uFF0C\u4F46\u8981\u57FA\u4E8E\u539F\u59CB\u9898\u76EE\u76F8\u5173\u7684\u77E5\u8BC6\u8303\u7574\u3002
2. \u5982\u679C\u539F\u59CB\u9898\u76EE\u662F\u6570\u5B66\u9898\uFF0C\u6269\u5C55\u9898\u76EE\u53EF\u4EE5\u6539\u53D8\u6570\u5B57\u3001\u8FD0\u7B97\u7B26\u53F7\u6216\u8005\u9898\u578B\u3002\u5982\u679C\u662F\u8BED\u6587\u9898\uFF0C\u53EF\u4EE5\u4ECE\u5B57\u8BCD\u3001\u8BED\u53E5\u7406\u89E3\u7B49\u4E0D\u540C\u65B9\u9762\u51FA\u9898\u3002
3. \u786E\u4FDD\u9898\u76EE\u8868\u8FF0\u6E05\u6670\uFF0C\u6CA1\u6709\u6B67\u4E49\u3002
4. \u8BF7\u7528{LANGUAGE}\u56DE\u7B54\u3002

\u8BF7\u6309\u7167\u4E0B\u9762\u7684\u683C\u5F0F\u7ED9\u51FA\u56DE\u7B54\uFF1A
\u6839\u636E\u4E0A\u8FF0\u9898\u76EE\u751F\u6210\u7684\u6269\u5C55\u9898\u76EE\u5982\u4E0B\uFF1A
...
`;
var GENERATE_SIMILAR_TOPIC_TEMPLATE_EN = `
Your task is to generate 5 extended questions based on the existing question. These questions should be in line with the knowledge level of {GRADE}.
First, the existing question is as follows:
{TOPIC}
The requirements for setting questions at the {GRADE} knowledge level are as follows:
1. The questions should not be overly complex and should match the cognitive abilities of {GRADE} students.
2. They should cover common knowledge points in the {GRADE} curriculum.

When setting the questions, please follow the following guidelines:
1. For each extended question, try to approach from different knowledge - point perspectives, but stay within the knowledge scope related to the original question.
2. If the original question is a math problem, the extended questions can change the numbers, operation symbols, or question types. If it is a Chinese language problem, questions can be set from different aspects such as words and sentence comprehension.
3. Ensure that the questions are clearly stated without ambiguity.
4. Please answer in {LANGUAGE}.

Please provide your answer in the following format:
The extended questions generated based on the above question are as follows:
...
`;
var GENERATE_LEARNING_POINTS_TEMPLATE = `
\u4F60\u7684\u4EFB\u52A1\u662F\u6839\u636E\u7ED9\u5B9A\u7684\u9898\u76EE\u603B\u7ED3\u76F8\u5173\u77E5\u8BC6\u70B9\u3002\u8BF7\u4ED4\u7EC6\u9605\u8BFB\u4EE5\u4E0B\u9898\u76EE:
{TOPIC}

\u5728\u603B\u7ED3\u77E5\u8BC6\u70B9\u65F6\uFF0C\u8BF7\u6309\u7167\u4EE5\u4E0B\u6B65\u9AA4\u8FDB\u884C:
1. \u4ED4\u7EC6\u9605\u8BFB\u9898\u76EE\u5185\u5BB9\uFF0C\u786E\u5B9A\u9898\u76EE\u6D89\u53CA\u7684\u4E3B\u8981\u9886\u57DF\u6216\u4E3B\u9898\u3002
2. \u8BC6\u522B\u4E0E\u4E3B\u9898\u76F8\u5173\u7684\u5173\u952E\u6982\u5FF5\u3001\u539F\u7406\u6216\u4FE1\u606F\u3002
3. \u5C06\u8FD9\u4E9B\u6982\u5FF5\u3001\u539F\u7406\u6216\u4FE1\u606F\u8FDB\u884C\u5206\u7C7B\u6574\u7406\u3002
4. \u53BB\u9664\u5197\u4F59\u6216\u4E0D\u91CD\u8981\u7684\u4FE1\u606F\u3002
4. \u8BF7\u7528{LANGUAGE}\u56DE\u7B54\u3002

\u8BF7\u6309\u7167\u4E0B\u9762\u7684\u683C\u5F0F\u7ED9\u51FA\u56DE\u7B54\uFF1A
\u672C\u9898\u76EE\u4E3B\u8981\u6D89\u53CA\u5230\u7684\u77E5\u8BC6\u70B9\u5982\u4E0B\uFF1A
...
`;
var GENERATE_LEARNING_POINTS_TEMPLATE_EN = `
Your task is to summarize the relevant knowledge points based on the given question. Please carefully read the following question:
{TOPIC}
When summarizing the knowledge points, please follow these steps:
1. Carefully read the content of the question and determine the main field or theme involved in the question.
2. Identify the key concepts, principles, or information related to the theme.
3. Classify and organize these concepts, principles, and information.
4. Remove redundant or unimportant information.
5. Please answer in {LANGUAGE}.

Please provide your answer in the following format:
The main knowledge points involved in this question are as follows:
...
`;
var GENERATE_WORD_PHONETICS_TEMPLATE = `
\u4F60\u7684\u4EFB\u52A1\u662F\u6309\u7167\u8981\u6C42\u4E3A\u7ED9\u5B9A\u7684\u8BCD\u8BED\u6807\u6CE8\u8BFB\u97F3\uFF1A
{WORD}

\u5728\u751F\u6210\u97F3\u6807\u65F6,\u8BF7\u9075\u5FAA\u4EE5\u4E0B\u6307\u5357:
1. \u5982\u679C\u662F\u82F1\u8BED\u5355\u8BCD\uFF0C\u8BF7\u4F7F\u7528\u56FD\u9645\u97F3\u6807\u7B26\u53F7\u3002
2. \u5982\u679C\u662F\u4E2D\u6587\u8BCD\u8BED\uFF0C\u8BF7\u4F7F\u7528\u62FC\u97F3\u3002
3. \u76F4\u63A5\u7ED9\u51FA\u8BFB\u97F3\u6807\u6CE8\uFF0C\u4E0D\u8981\u591A\u4F59\u7684\u8BDD\u3002
`;
var SYNTAX_ANALYSIS_TEMPLATE = `
\u4F60\u7684\u4EFB\u52A1\u662F\u6309\u7167\u8981\u6C42\u5BF9\u7ED9\u5B9A\u7684\u77ED\u6587\u6216\u53E5\u5B50\u8FDB\u884C\u8BED\u6CD5\u5206\u6790\uFF1A
{TEXT}

\u5728\u8FDB\u884C\u8BED\u6CD5\u5206\u6790\u65F6\uFF0C\u8BF7\u9075\u5FAA\u4EE5\u4E0B\u6307\u5357\uFF1A
1. \u8BC6\u522B\u53E5\u5B50\u4E2D\u7684\u5404\u4E2A\u8BED\u6CD5\u6210\u5206\uFF0C\u5982\u4E3B\u8BED\u3001\u8C13\u8BED\u3001\u5BBE\u8BED\u3001\u5B9A\u8BED\u3001\u72B6\u8BED\u3001\u8865\u8BED\u7B49\u3002
2. \u6307\u51FA\u53E5\u5B50\u7684\u7C7B\u578B\uFF0C\u5982\u7B80\u5355\u53E5\u3001\u590D\u5408\u53E5\u3001\u5E76\u5217\u53E5\u7B49\u3002
3. \u68C0\u67E5\u53E5\u5B50\u662F\u5426\u5B58\u5728\u8BED\u6CD5\u9519\u8BEF\uFF0C\u5982\u4E3B\u8C13\u4E0D\u4E00\u81F4\u3001\u65F6\u6001\u9519\u8BEF\u3001\u7528\u8BCD\u4E0D\u5F53\u7B49\uFF0C\u5982\u679C\u6CA1\u6709\u8BED\u6CD5\u9519\u8BEF\u8BE5\u90E8\u5206\u4E0D\u7528\u5305\u542B\u5728\u56DE\u7B54\u4E2D\u3002
4. \u5982\u679C\u6709\u591A\u4E2A\u53E5\u5B50\uFF0C\u8BF7\u5206\u522B\u5BF9\u6BCF\u4E2A\u53E5\u5B50\u8FDB\u884C\u5206\u6790\u3002
5. \u8BF7\u76F4\u63A5\u7ED9\u51FA\u5206\u6790\u7ED3\u679C\u3002

\u8BF7\u6309\u7167\u4E0B\u9762\u7684\u683C\u5F0F\u7ED9\u51FA\u56DE\u7B54\uFF1A
\u8BED\u6CD5\u5206\u6790\u7ED3\u679C\uFF1A
...
`;

// src/llm.ts
var import_obsidian4 = require("obsidian");
async function sendLLMRequest(prompt, llmSettings) {
  try {
    const body = {
      "model": llmSettings.modelName,
      "tempreture": 1,
      "messages": [
        {
          "role": "system",
          "content": "\u4F60\u662F\u4E00\u4E2A\u5B66\u751F\u5B66\u4E60\u52A9\u7406\u3002"
        },
        {
          "role": "user",
          "content": prompt
        }
      ]
    };
    const jsonBody = JSON.stringify(body);
    const headers = {
      "Content-Type": "application/json",
      // 使用 API Key 进行鉴权
      "Authorization": `Bearer ${llmSettings.apiKey}`
    };
    const requestParam = {
      url: llmSettings.apiBase,
      method: "POST",
      headers,
      body: jsonBody
    };
    const response = await (0, import_obsidian4.requestUrl)(requestParam);
    if (response.status != 200) {
      console.error("Send llm request error", response);
      return "";
    }
    const result = response.json;
    return result.choices[0].message.content;
  } catch (error) {
    console.error("\u8C03\u7528\u5927\u6A21\u578B\u51FA\u9519:", error);
    throw error;
  }
}

// src/locales/en.ts
var pluginName = "Student Repo";
var similarTopics = "Similar Topics";
var learningPoints = "Knowledge Points";
var imageToText = "Image to Text";
var textToSpeech = "Text to Speech";
var translateText = "Translate";
var addWordBank = "Add to Word Bank";
var syntaxAnalysis = "Syntax Analysis";
var en_default = {
  pluginName: `${pluginName}`,
  similarTopics: `${similarTopics}`,
  learningPoints: `${learningPoints}`,
  imageToText: `${imageToText}`,
  textToSpeech: `${textToSpeech}`,
  translateText: `${translateText}`,
  addWordBank: `${addWordBank}`,
  syntaxAnalysis: `${syntaxAnalysis}`,
  imageToTextMenu: `${pluginName}: ${imageToText}`,
  textToSpeechMenu: `${pluginName}: ${textToSpeech}`,
  translateTextMenu: `${pluginName}: ${translateText}`,
  addWordBankMenu: `${pluginName}: ${addWordBank}`,
  syntaxAnalysisMenu: `${pluginName}: ${syntaxAnalysis}`,
  genSimilarTopicsMenu: `${pluginName}: ${similarTopics}`,
  genLearningPointsMenu: `${pluginName}: ${learningPoints}`,
  createNodeFromImagesMenu: `${pluginName}: Create note from images`,
  createNodeFromImageMenu: `${pluginName}: Create note from image`,
  analysisAndSummarize: `Analyze & Summarize`,
  // For settings
  llmProvider: "Alibaba Qwen",
  ocrProvider: "Baidu Cloud",
  ttsProvider: "Microsoft Azure",
  studentGrade: `Student Grade`,
  localLanguage: "Local Language",
  llmSetting: `LLM Settings`,
  ocrSetting: "OCR and Translation",
  speechSetting: "Speech Synthesis",
  speechSubscriptionKey: "Speech Subscription Key",
  speechVoiceType: "Speech Voice Type",
  speechVoiceGB: "Great Britain",
  speechVoiceCN: "Mandarin",
  speechVoiceUS: "USA",
  mtSubscriptionKey: "Translation Subscription Key",
  // For status bar
  errorHappen: "Error Happened",
  imageToTexting: "Image to text...",
  textToSpeeching: "Text to speech...",
  translating: "Translating...",
  thinking: "Thinking..."
};

// src/locales/zh-CN.ts
var pluginName2 = "\u5B66\u751F\u77E5\u8BC6\u5E93";
var similarTopics2 = "\u9898\u76EE\u6269\u5C55";
var learningPoints2 = "\u77E5\u8BC6\u70B9\u5206\u6790";
var imageToText2 = "\u6587\u5B57\u8BC6\u522B";
var textToSpeech2 = "\u6587\u5B57\u8F6C\u8BED\u97F3";
var translateText2 = "\u7FFB\u8BD1";
var addWordBank2 = "\u52A0\u5355\u8BCD\u5E93";
var syntaxAnalysis2 = "\u8BED\u6CD5\u5206\u6790";
var zh_CN_default = {
  pluginName: `${pluginName2}`,
  similarTopics: `${similarTopics2}`,
  learningPoints: `${learningPoints2}`,
  imageToText: `${imageToText2}`,
  textToSpeech: `${textToSpeech2}`,
  translateText: `${translateText2}`,
  addWordBank: `${addWordBank2}`,
  syntaxAnalysis: `${syntaxAnalysis2}`,
  imageToTextMenu: `${pluginName2}: ${imageToText2}`,
  textToSpeechMenu: `${pluginName2}: ${textToSpeech2}`,
  translateTextMenu: `${pluginName2}: ${translateText2}`,
  addWordBankMenu: `${pluginName2}: ${addWordBank2}`,
  syntaxAnalysisMenu: `${pluginName2}: ${syntaxAnalysis2}`,
  genSimilarTopicsMenu: `${pluginName2}: ${similarTopics2}`,
  genLearningPointsMenu: `${pluginName2}: ${learningPoints2}`,
  createNodeFromImagesMenu: `${pluginName2}: \u4ECE\u56FE\u7247\u751F\u6210\u7B14\u8BB0`,
  createNodeFromImageMenu: `${pluginName2}: \u4ECE\u56FE\u7247\u751F\u6210\u7B14\u8BB0`,
  analysisAndSummarize: `\u5206\u6790&\u6269\u5C55`,
  // For settings
  llmProvider: "\u963F\u91CC\u5343\u95EE",
  ocrProvider: "\u767E\u5EA6\u4E91",
  ttsProvider: "\u5FAE\u8F6FAzure",
  studentGrade: `\u5B66\u751F\u5E74\u7EA7`,
  localLanguage: "\u672C\u5730\u8BED\u8A00",
  llmSetting: `\u5927\u6A21\u578B\u914D\u7F6E`,
  ocrSetting: "\u6587\u5B57\u8BC6\u522B\u4E0E\u7FFB\u8BD1",
  speechSetting: "\u8BED\u97F3\u5408\u6210",
  speechSubscriptionKey: "\u8BED\u97F3\u670D\u52A1Key",
  speechVoiceType: "\u8BED\u97F3\u98CE\u683C",
  speechVoiceGB: "\u82F1\u5F0F",
  speechVoiceUS: "\u7F8E\u5F0F",
  speechVoiceCN: "\u666E\u901A\u8BDD",
  mtSubscriptionKey: "\u7FFB\u8BD1\u670D\u52A1Key",
  // For status bar
  errorHappen: "\u51FA\u9519\u4E86",
  imageToTexting: "\u6587\u5B57\u8BC6\u522B\u4E2D...",
  textToSpeeching: "\u8BED\u97F3\u5408\u6210\u4E2D...",
  translating: "\u7FFB\u8BD1\u4E2D...",
  thinking: "\u601D\u8003\u4E2D..."
};

// src/main.ts
var StudentRepoPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    var _a;
    const locale = window.localStorage.getItem("language");
    this.isLangZh = (_a = locale == null ? void 0 : locale.startsWith("zh")) != null ? _a : false;
    this.trans = this.isLangZh ? zh_CN_default : en_default;
    this.addSettingTab(new StudentRepoSettingTab(this.app, this));
    await this.loadSettings();
    console.log("Student Repository Helper loaded");
    console.log("Settings:", this.settings);
    console.log("Platform isDesktop:", import_obsidian5.Platform.isDesktop);
    console.log("Platform isMobile:", import_obsidian5.Platform.isMobile);
    console.log("Platform isWin:", import_obsidian5.Platform.isWin);
    this.registerFileMenu();
    this.registerEditorMenu();
    this.registerCommand();
  }
  registerFileMenu() {
    this.registerEvent(
      this.app.workspace.on("files-menu", (menu, files) => {
        var isImages = isImageFiles(files);
        if (isImages) {
          if (isImages) {
            menu.addItem((item) => {
              item.setTitle(this.trans.createNodeFromImagesMenu).setIcon("document").onClick(async () => {
                await createImagesNote(files);
              });
            });
          }
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        const isImage = isFileImage(file.path);
        if (isImage) {
          menu.addItem((item) => {
            item.setTitle(this.trans.createNodeFromImageMenu).setIcon("document").onClick(async () => {
              var files = [file];
              await createImagesNote(files);
            });
          });
          menu.addItem((item) => {
            item.setTitle(this.trans.imageToTextMenu).setIcon("document").onClick(async () => {
              const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
              if (view) {
                await this.handleOcrRequest(file.path, view.editor);
              }
            });
          });
        }
      })
    );
  }
  async handleOcrRequest(imageFile, editor, line = -1) {
    const statusBarItem = this.addStatusBarItem();
    statusBarItem.setText(this.trans.imageToTexting);
    console.log("\u6587\u5B57\u8BC6\u522B:", imageFile);
    try {
      const file = await this.getLinkedFile(imageFile);
      if (!file) {
        new import_obsidian5.Notice(`Image file not exist: ${imageFile}`);
      } else {
        if (this.isLangZh) {
          new import_obsidian5.Notice(`\u5C06<${imageFile}>\u8F6C\u6210\u6587\u5B57`);
        } else {
          new import_obsidian5.Notice(`Convert <${imageFile}> to text`);
        }
        var imageBuffer = await this.app.vault.adapter.readBinary(file.path);
        const isUpdate = await checkAccessToken(this.settings.ocrSettings);
        if (isUpdate) {
          await this.saveSettings();
        }
        const text = await imageToTextHttp(imageBuffer, this.settings.ocrSettings);
        if (line < 0) {
          line = editor.getCursor().line + 1;
        }
        const nextLinePos = { line, ch: 0 };
        editor.replaceRange(`${text}
`, nextLinePos);
        editor.setCursor(nextLinePos);
        editor.scrollIntoView({ from: { line, ch: 0 }, to: { line: line + 20, ch: 0 } });
      }
      statusBarItem.setText("");
    } catch (error) {
      console.error(error);
      statusBarItem.setText(this.trans.errorHappen + error.message);
      setTimeout(() => {
        statusBarItem.setText("");
      }, 5e3);
    }
  }
  async handleImagesToTextRequest(mdFile, editor) {
    const mdContent = await this.app.vault.read(mdFile);
    const lines = mdContent.split("\n");
    const imageRegex = /!\[\[(.*\.(jpg|jpeg|png|bmp))\]\]/;
    for (let i = lines.length - 1; i >= 0; i--) {
      const line = lines[i];
      const match = line.match(imageRegex);
      if (match) {
        const imagePath = match[1];
        console.log(`Image match: ${imagePath} in line ${i}`);
        await this.handleOcrRequest(imagePath, editor, i + 1);
      }
    }
  }
  async handleTextToSpeechRequest(text, mdFile, editor) {
    const statusBarItem = this.addStatusBarItem();
    statusBarItem.setText(this.trans.textToSpeeching);
    try {
      const { full_path, rel_path } = await this.getAudioFilePath(mdFile, this.settings);
      text = removeMarkdownTags(text);
      console.time("textToSpeech");
      let audio_buffer = await textToSpeechHttp(text, this.settings.speechSettings.subscriptionKey, this.settings.speechSettings.speechVoice);
      await this.app.vault.adapter.writeBinary(rel_path, audio_buffer);
      console.timeEnd("textToSpeech");
      console.log(`Audio saved to ${rel_path}`);
      let md_text = `\`\`\`audio-player
 [[${rel_path}]]
\`\`\`
`;
      const startOffset = editor.getCursor("from");
      const nextLinePos = { line: startOffset.line, ch: 0 };
      editor.replaceRange(md_text, nextLinePos);
      statusBarItem.setText("");
    } catch (error) {
      console.error(error);
      statusBarItem.setText(this.trans.errorHappen + error.message);
      setTimeout(() => {
        statusBarItem.setText("");
      }, 5e3);
    }
  }
  async handleTranslateTextRequest(text, editor) {
    const isUpdate = await checkAccessToken(this.settings.ocrSettings);
    if (isUpdate) {
      await this.saveSettings();
    }
    let toLang = this.settings.stuSettings.localLanguage === "zh-Hans" ? "zh" : "en";
    const translatedText = await translateTextHttp(text, toLang, this.settings.ocrSettings);
    const endOffset = editor.getCursor("to");
    editor.replaceRange(`(${translatedText})`, endOffset);
  }
  async handleAddToWordBankRequest(word, editor) {
    const prompt = GENERATE_WORD_PHONETICS_TEMPLATE.replace("{WORD}", word);
    var phonetics = await sendLLMRequest(prompt, this.settings.llmSettings);
    if (!phonetics.startsWith("/")) {
      phonetics = `/${phonetics}/`;
    }
    const isUpdate = await checkAccessToken(this.settings.ocrSettings);
    if (isUpdate) {
      await this.saveSettings();
    }
    let toLang = this.settings.stuSettings.localLanguage === "zh-Hans" ? "zh" : "en";
    const translatedText = await translateTextHttp(word, toLang, this.settings.ocrSettings);
    const lastLine = editor.lastLine();
    const lastLineText = editor.getLine(lastLine);
    if (lastLineText.startsWith(" - ")) {
      editor.setLine(lastLine + 1, `
 - ${word} ${phonetics} ${translatedText}`);
    } else {
      editor.setLine(lastLine + 1, `

 Word Bank 
 - ${word} ${phonetics}  ${translatedText}`);
    }
  }
  async handleSyntaxAnalysisRequest(text, editor) {
    const statusBarItem = this.addStatusBarItem();
    statusBarItem.setText("\u601D\u8003\u4E2D...");
    try {
      const prompt = SYNTAX_ANALYSIS_TEMPLATE.replace("{TEXT}", text);
      const result = await sendLLMRequest(prompt, this.settings.llmSettings);
      const lastLine = editor.lastLine();
      const displayText = `
${text}

 ${result}`;
      editor.setLine(lastLine + 1, `${addQuoteToText(displayText, this.trans.syntaxAnalysis)}

`);
      statusBarItem.setText("");
    } catch (error) {
      console.error(error);
      statusBarItem.setText(this.trans.errorHappen + error.message);
      setTimeout(() => {
        statusBarItem.setText("");
      }, 5e3);
    }
  }
  async handleGenSimilarTopicRequest(topic, editor) {
    const statusBarItem = this.addStatusBarItem();
    statusBarItem.setText("\u601D\u8003\u4E2D...");
    try {
      var prompt = "";
      if (this.settings.stuSettings.localLanguage === "zh-Hans") {
        prompt = GENERATE_SIMILAR_TOPIC_TEMPLATE.replace("{GRADE}", this.settings.stuSettings.grade).replace("{TOPIC}", topic).replace("{LANGUAGE}", "\u4E2D\u6587");
      } else {
        prompt = GENERATE_SIMILAR_TOPIC_TEMPLATE_EN.replace("{GRADE}", this.settings.stuSettings.grade).replace("{TOPIC}", topic).replace("{LANGUAGE}", "English");
      }
      const result = await sendLLMRequest(prompt, this.settings.llmSettings);
      const endOffset = editor.getCursor("to");
      const nextLinePos = { line: endOffset.line + 1, ch: 0 };
      editor.replaceRange(`${addQuoteToText(result, this.trans.similarTopics)}

`, nextLinePos);
      statusBarItem.setText("");
    } catch (error) {
      console.error(error);
      statusBarItem.setText(this.trans.errorHappen + error.message);
      setTimeout(() => {
        statusBarItem.setText("");
      }, 5e3);
    }
  }
  async handleGenLearningPointRequest(topic, editor) {
    const statusBarItem = this.addStatusBarItem();
    statusBarItem.setText(this.trans.thinking);
    try {
      var prompt = "";
      if (this.settings.stuSettings.localLanguage === "zh-Hans") {
        prompt = GENERATE_LEARNING_POINTS_TEMPLATE.replace("{TOPIC}", topic).replace("{LANGUAGE}", "\u4E2D\u6587");
      } else {
        prompt = GENERATE_LEARNING_POINTS_TEMPLATE_EN.replace("{TOPIC}", topic).replace("{LANGUAGE}", "English");
      }
      const result = await sendLLMRequest(prompt, this.settings.llmSettings);
      const endOffset = editor.getCursor("to");
      const nextLinePos = { line: endOffset.line + 1, ch: 0 };
      editor.replaceRange(`${addQuoteToText(result, this.trans.learningPoints)}

`, nextLinePos);
      statusBarItem.setText("");
    } catch (error) {
      console.error(error);
      statusBarItem.setText(this.trans.errorHappen + error.message);
      setTimeout(() => {
        statusBarItem.setText("");
      }, 5e3);
    }
  }
  async handlePluginUpdate() {
    if (await this.app.vault.adapter.exists("plugins")) {
      const listFiles = await this.app.vault.adapter.list("plugins");
      for (let i = 0; i < listFiles.folders.length; i++) {
        const plugin = listFiles.folders[i];
        const pluginInstallPath = `.obsidian/${plugin}`;
        await this.app.vault.adapter.rmdir(pluginInstallPath, true);
        await this.app.vault.adapter.copy(`${plugin}`, pluginInstallPath);
        console.log(`${plugin} install to ${pluginInstallPath}`);
      }
      const statusBarItem = this.addStatusBarItem();
      statusBarItem.setText("\u63D2\u4EF6\u66F4\u65B0\u5B8C\u6210");
      setTimeout(() => {
        statusBarItem.setText("");
      }, 5e3);
    }
  }
  registerEditorMenu() {
    if (!import_obsidian5.Platform.isDesktop) {
      return;
    }
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        const selection = editor.getSelection();
        console.log("selection:", selection);
        const imageRegex = /!?\[?\[?(.*\.(jpg|jpeg|png|bmp))\]?\]?/;
        const match = selection.match(imageRegex);
        if (!match) {
          menu.addItem((item) => {
            item.setTitle(this.trans.textToSpeechMenu).setIcon("document").onClick(async () => {
              this.handleTextToSpeechRequest(selection, view.file, editor);
            });
          });
          menu.addItem((item) => {
            item.setTitle(this.trans.translateTextMenu).setIcon("document").onClick(async () => {
              this.handleTranslateTextRequest(selection, editor);
            });
          });
          menu.addItem((item) => {
            item.setTitle(this.trans.addWordBankMenu).setIcon("document").onClick(async () => {
              this.handleAddToWordBankRequest(selection, editor);
            });
          });
          menu.addItem((item) => {
            item.setTitle(this.trans.syntaxAnalysisMenu).setIcon("document").onClick(async () => {
              this.handleSyntaxAnalysisRequest(selection, editor);
            });
          });
          menu.addItem((item) => {
            item.setTitle(this.trans.genSimilarTopicsMenu).setIcon("document").onClick(async () => {
              this.handleGenSimilarTopicRequest(selection, editor);
            });
          });
          menu.addItem((item) => {
            item.setTitle(this.trans.genLearningPointsMenu).setIcon("document").onClick(async () => {
              this.handleGenLearningPointRequest(selection, editor);
            });
          });
        }
      })
    );
  }
  registerCommand() {
    this.addCommand({
      id: "translate",
      name: this.trans.translateText,
      icon: "languages",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        console.log("selection:", selection);
        this.handleTranslateTextRequest(selection, editor);
      }
    });
    this.addCommand({
      id: "word_bank",
      name: this.trans.addWordBank,
      icon: "rss",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        console.log("selection:", selection);
        this.handleAddToWordBankRequest(selection, editor);
      }
    });
    this.addCommand({
      id: "syntax_analysis",
      name: this.trans.syntaxAnalysis,
      icon: "brain",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        console.log("selection:", selection);
        this.handleSyntaxAnalysisRequest(selection, editor);
      }
    });
    this.addCommand({
      id: "text_to_speech",
      name: this.trans.textToSpeech,
      icon: "activity",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        console.log("selection:", selection);
        this.handleTextToSpeechRequest(selection, view.file, editor);
      }
    });
    this.addCommand({
      id: "gen_learning_point",
      name: this.trans.analysisAndSummarize,
      icon: "brain",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        console.log("selection:", selection);
        this.handleGenSimilarTopicRequest(selection, editor);
        this.handleGenLearningPointRequest(selection, editor);
      }
    });
    this.addCommand({
      id: "image_to_text",
      name: this.trans.imageToText,
      icon: "type",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        const imageRegex = /!?\[?\[?(.*\.(jpg|jpeg|png|bmp))\]?\]?/;
        const match = selection.match(imageRegex);
        if (match) {
          let imageFile = match[1];
          this.handleOcrRequest(imageFile, editor);
        } else {
          if (view) {
            this.handleImagesToTextRequest(view.file, editor);
          }
        }
      }
    });
    this.addCommand({
      id: "plugin_update",
      name: "Plugin Update",
      icon: "arrow-up",
      callback: async () => {
        this.handlePluginUpdate();
      }
    });
  }
  async getLinkedFile(link) {
    const file = this.app.metadataCache.getFirstLinkpathDest(link, "");
    if (!file) {
      return null;
    }
    return this.app.vault.getAbstractFileByPath(file.path);
  }
  async getAudioFilePath(tfile, settings) {
    const audio_path = (0, import_obsidian5.normalizePath)(`${tfile.parent.path}/${settings.speechSettings.speechOutputPath}`);
    if (!await this.app.vault.adapter.exists(audio_path)) {
      await this.app.vault.adapter.mkdir(audio_path);
    }
    var audio_full_path = this.app.vault.adapter.getFullPath(audio_path);
    var full_path = "";
    var rel_path = "";
    var i = 0;
    do {
      var output_fname = "";
      if (i > 0) {
        output_fname = `${tfile.basename}_${i}.mp3`;
      } else {
        output_fname = `${tfile.basename}.mp3`;
      }
      full_path = (0, import_obsidian5.normalizePath)(`${audio_full_path}/${output_fname}`);
      rel_path = (0, import_obsidian5.normalizePath)(`${audio_path}/${output_fname}`);
      i++;
    } while (await this.app.vault.adapter.exists(rel_path));
    return { full_path, rel_path };
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
function isFileImage(path) {
  return path.endsWith(".png") || path.endsWith(".jpg") || path.endsWith(".jpeg") || path.endsWith(".webp") || path.endsWith(".gif") || path.endsWith(".bmp");
}
function isImageFiles(files) {
  var j;
  for (j in files) {
    var f_path = files[j].path;
    if (!isFileImage(f_path)) {
      return false;
    }
  }
  return true;
}
async function createNote(name, contents = "") {
  var _a, _b, _c;
  try {
    let pathPrefix;
    switch (app.vault.getConfig("newFileLocation")) {
      case "current":
        pathPrefix = (_c = (_b = (_a = app.workspace.getActiveFile()) == null ? void 0 : _a.parent) == null ? void 0 : _b.path) != null ? _c : "";
        break;
      case "folder":
        pathPrefix = app.vault.getConfig("newFileFolderPath");
        break;
      default:
        pathPrefix = "";
        break;
    }
    if (pathPrefix) {
      pathPrefix += "/";
    }
    let path = `${pathPrefix}${name}`;
    console.log(`pathPrefix: ${pathPrefix}, name: ${name}`);
    if (app.vault.getAbstractFileByPath(`${path}.md`)) {
      let i = 1;
      while (await app.vault.getAbstractFileByPath(`${path} ${i}.md`)) {
        i++;
      }
      path += ` ${i}`;
    }
    await app.vault.create(`${path}.md`, contents);
    await app.workspace.openLinkText(path, "");
  } catch (e) {
    new import_obsidian5.Notice("Text Extract - Could not create note: " + e.message);
    throw e;
  }
}
async function createImagesNote(files) {
  var j;
  var file_paths = new Array(files.length);
  for (j in files) {
    console.log(`ppath: ${files[j].parent.path}, pname: ${files[j].parent.name}`);
    file_paths[j] = files[j].path;
  }
  file_paths.sort();
  var contents = "";
  for (j in file_paths) {
    console.log(file_paths[j]);
    contents += `![[${file_paths[j]}]]
`;
  }
  console.log(contents);
  await createNote("Untitled", contents);
}
function addQuoteToText(text, note) {
  return `
> [!NOTE] ${note}
` + text.split("\n").map((line) => `> ${line}`).join("\n");
}
function removeMarkdownTags(text) {
  text = text.replace(/^(#+)\s/gm, "");
  text = text.replace(/(\*\*|__|_|\*)/g, "");
  text = text.replace(/^([-*+]\s|\d+\.\s)/gm, "");
  text = text.replace(/```[\s\S]*?```/g, "");
  text = text.replace(/`([^`]*)`/g, "$1");
  text = text.replace(/!?\[[^\]]*\]\([^)]*\)/g, "");
  text = text.replace(/^---+$/gm, "");
  text = text.replace(/<[^>]*>/g, "");
  return text;
}
//# sourceMappingURL=data:application/json;base64,
